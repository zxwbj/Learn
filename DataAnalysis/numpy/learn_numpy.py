
import numpy as np
import pandas as pd
# import time

# time0 = time.time()
# my_arr = np.arange(1000000)
# time1 = time.time()
# print("interval: ", time1 - time0)
#
# time0 = time.time()
# my_list = list(range(1000000))
# time1 = time.time()
# print("interval: ", time1 - time0)
#
# data = np.random.randn(2, 3)
# print(data)
# print(data * 10)
# print(data + data)
# print(data.shape)
# print(data.dtype)
#
# data1 = [6, 7.5, 8, 0, 1]
# arr1 = np.array(data1)
# print(arr1)
# print(arr1.dtype)
# data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]
# arr2 = np.array(data2)
# print(arr2)
# print(arr2.ndim)
# print(arr2.shape)
# print(arr2.dtype)
#
# print(np.zeros(10))
# print(np.zeros((3, 6)))
# print(np.ones(10))
# print(np.ones((3, 6)))
# print(np.empty((2, 3, 4)))
# print(np.arange(15))
#
# print('\n')
# x = np.zeros((2, 3))
# print(x)
# x = np.ones_like(x)
# print(x)
# x = np.zeros_like(x)
# print(x)
#
# arr1 = np.array([1, 2, 3], dtype=np.float64)
# arr2 = np.array([1, 2, 3], dtype=np.int32)
# print(arr1.dtype)
# print(arr2.dtype)
# arr2 = arr2.astype(np.int64)
# print(arr2.dtype)
# arr2 = arr2.astype(np.float64)
# print(arr2.dtype)
#
# arr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])
# print(arr)
# print(arr.astype(np.int32))
#
# numeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_)
# print(numeric_strings)
# print(numeric_strings.astype(np.float64))
# print('----------------------------------')
#
# arr = np.array([[1., 2., 3.], [4., 5., 6.]])
# print(arr)
# print(arr.dtype)
# print(arr * arr)
# print(arr + arr)
# print(arr - arr)
# print(1 / arr)
# print(arr ** 0.5)
#
# arr2 = np.array([[0., 4., 1.], [7., 2., 12.]])
# print(arr)
# print(arr2)
# print(arr2 > arr1)
# print((arr2 > arr).dtype)
# print('--------------------------------')
#
# arr = np.arange(10)
# print(arr)
# print(arr[5])
# print(arr[5:8])
# arr[5:8] = 12
# print(arr)
#
# arr_slice = arr[5:8]
# print(arr_slice)
# arr_slice[1] = 12345
# print(arr_slice)
# print(arr)
# arr_slice[:] = 64
# print(arr_slice)
# print(arr)
#
# arr_copy = arr.copy()
# print(arr)
# print(arr_copy)
# arr_copy[:] = 0
# print(arr)
# print(arr_copy)
# print('-------------------------------')
#
# arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# print(arr2d.shape)
# print(arr2d[2])
# print(arr2d[0][2])
# print(arr2d[0, 2])
# print('-------------------------------')
#
# arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
# print(arr3d.shape)
# print(arr3d)
# print(arr3d[0])
# print(arr3d[0].shape)
# print(arr3d[1])
# print(arr3d[1].shape)
#
# old_values = arr3d[0].copy()
# arr3d[0] = 43
# print(arr3d)
# arr3d[0] = old_values
# print(arr3d)
#
# print(arr3d[1][0])
# print(arr3d[1, 0])
# print('-------------------------')
#
# print(arr)
# print(arr[1:6])
# print(arr2d)
# print(arr2d[:2])
# print(arr2d[:2, 1:])
# print(arr2d[1, :2])
# print(arr2d[:2, 2])
# print(arr2d[:, :1])
# arr2d[:2, 1:] = 0
# print(arr2d)
#
# print(arr2d[2])
# print(arr2d[2].shape)
# print(arr2d[2, :])
# print(arr2d[2, :].shape)
# print(arr2d[2:, :])
# print(arr2d[2:, :].shape)
# print('-------------------------')
#
# names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
# print(names)
# print(names.dtype)
# data = np.random.randn(7, 4)
# print(data)
# print(names == 'Bob')
# print(data[names == 'Bob'])
# print(data[names == 'Bob', 2:])
# print(data[names == 'Bob', 3])
# print(data[names == 'Bob', 3:])
# print(names != 'Bob')
# print(data[names != 'Bob'])
# print(data[~(names == 'Bob')])
# print('----------------------------')
# cond = names == 'Bob'
# print(data[~cond])
# print('-----------------------------')
# mask = (names == 'Bob') | (names == 'Will')
# print(names, mask, mask.dtype)
# print(data)
# print(data[mask])
# print('------------------------------')
# print(data)
# data[data < 0] = 0
# print(data)
# data[names != 'Joe'] = 7
# print(data)
# print('------------------------------------')
# arr = np.empty((8, 4))
# for i in range(8):
#     arr[i] = i
# print(arr)
# print(arr[[4, 3, 0, 6]])
# print(arr[[-4, -3, -6]])
# print('-----------------------------------')
# arr = np.arange(32).reshape(8, 4)
# print(arr)
# # arr = np.arange(32).reshape(4, 8)
# # print(arr)
# print(arr[[1, 5, 7, 2], [0, 3, 1, 2]])
# print(arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]])
# print('----------------------------------')
# arr = np.arange(15).reshape(3, 5)
# print(arr)
# print(arr.T)
# arr = np.random.randn(6, 3)
# print(arr)
# print(np.dot(arr.T, arr))
# print('-----------------------------------')
# arr = np.arange(16).reshape((2, 2, 4))
# print(arr)
# print(arr.transpose((1, 0, 2)))
# print(arr)
# print(arr.swapaxes(1, 2))
# print('------------------------------------')
# arr = np.arange(10)
# print(arr)
# print(np.sqrt(arr))
# print(np.exp(arr))
# x = np.random.randn(8)
# y = np.random.randn(8)
# print(x)
# print(y)
# print(np.maximum(x, y))
# print('--------------------------------------')
# arr = np.random.randn(7) * 5
# print(arr)
# remainder, whole_part = np.modf(arr)
# print(remainder)
# print(whole_part)
# print('----------------------------------------')
# arr = np.random.randn(7) * 5
# print(arr)
# print(np.sqrt(arr))
# print(arr)
# print(np.sqrt(arr, arr))
# print(arr)
# print('----------------------------------------')
# points = np.arange(-5, 5, 0.01)
# xs, ys = np.meshgrid(points, points)
# # print(points)
# print(ys)
# z = np.sqrt(xs ** 2 + ys ** 2)
# print(z)
#
# import matplotlib.pyplot as plt
# plt.imshow(z, cmap=plt.cm.gray)
# plt.colorbar()
# plt.title("Image plot of $\sqrt{x^2 + y^2}$ for a grid of values")
# # plt.show()
# print('--------------------------------')
# xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])
# yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])
# cond = np.array([True, False, True, True, False])
# result = [(x if c else y) for x, y, c in zip(xarr, yarr, cond)]
# print(result)
# result = np.where(cond, xarr, yarr)
# print(result)
# arr = np.random.randn(4, 4)
# print(arr)
# print(np.where(arr > 0, 2, -2))
# print(np.where(arr > 0, 2, arr))
# print('-------------------------------------')
# arr = np.random.randn(5, 4)
# print(arr)
# print(arr.mean())
# print(np.mean(arr))
# print(np.sum(arr))
# print(arr.sum())
# print(arr.mean(axis=1))
# print(arr.sum(axis=0))
# arr = np.array(np.arange(8))
# print(arr)
# print(arr.cumsum())
# arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])
# print(arr)
# print(arr.cumsum(axis=0))
# print(arr.cumprod(axis=1))
# print('-------------------------------------------')
# arr = np.random.randn(100)
# print(arr)
# print((arr > 0).sum())
# bools = np.array([False, False, True, False])
# print(bools.any())
# print(bools.all())
# print('--------------------------------------')
# arr = np.random.randn(6)
# print(arr)
# arr.sort()
# print(arr)
# arr = np.random.randn(5, 3)
# print(arr)
# arr.sort(1)
# print(arr)
# arr = np.random.randn(6)
# print(arr)
# print(np.sort(arr))
# print(arr)

arr = np.arange(10)
print(arr)
np.save('some_array', arr)
arr1 = np.load('some_array.npy')
print(arr1)
np.savez('array_archive.npz', a=arr, b=arr)
arch = np.load('array_archive.npz')
print(arch)
print(arch['b'])
print('-------------------------------')
x = np.array([[1., 2., 3.], [4., 5., 6.]])
y = np.array([[6., 23.], [-1, 7], [8, 9]])
print(x)
print(y)
print(x.dot(y))
print(np.dot(x, y))
print(np.ones(3))
print(x)
print(np.dot(x, np.ones(3)))
print(x @ np.ones(3))
print('--------------------------')
from numpy.linalg import inv, qr
X = np.random.randn(5, 5)
mat = X.T.dot(X)
# print(mat)
# print(inv(mat))
print(mat.dot(inv(mat)))
q, r = qr(mat)
print(r)
print('-----------------------------')
samples = np.random.normal(size=(4, 4))
print(samples)
np.random.seed(1234)
rng = np.random.RandomState(1234)
print(rng.randn(10))

